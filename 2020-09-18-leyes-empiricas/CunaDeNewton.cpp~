// Simular el movimiento de 2 planetas por PEFRL
#include <iostream>
#include <cmath>
#include "Vector.h" 
using namespace std;


//------------------------------Declarar constantes------------------

const int N=2;  //numero de cuerpos
const double g=980;
const double M=100;
const double Ll=12;
const double R=2;


const double E=0.1786178958448091e00;
const double L=-0.2123418310626054e0;
const double X=-0.6626458266981849e-1;

const double coeficiente1=(1-2*L)/2;
const double coeficiente2=(1-2*(X+E))*2/2;

//-----------------------------Declarar clases----------------------
class Cuerpo;
class Colisionador;

//-----------------------------Implementar clases--------------------

//-----------------------------Clase Cuerpo-------------------------
class Cuerpo{
private:
  double  theta, omega, tau;   double m, R, I;
public:
  void Inicie(double theta0,double omega0,double m0,double R0);
  void BorreTorque(void){tau=0;};
  void AdicioneTorque(double tau0){tau+=tau0;};
  void Mueva_Theta(double dt, double coeficiente);
  void Mueva_Omega(double dt, double coeficiente);
  void Dibujese(void);
  double GetTau(void){return r.x();};  //inline

  friend class Colisionador;
};
void Cuerpo::Inicie(double theta0,double omega0,double m0,double R0){
  theta=theta0; omega=omega0; m=m0;  R=R0; 
}

void Cuerpo::Mueva_Theta(double dt, double coeficiente){
  r+=V*dt*coeficiente;
}

void Cuerpo::Mueva_Omega(double dt, double coeficiente){
  V+=(F*dt*coeficiente)/m;
}

void Cuerpo::Dibujese(void){
  cout<<" , "<<r.x()<<"+"<<R<<"*cos(t),"<<r.y()<<"+"<<R<<"*sin(t)";
}

//---------------------------Clase Colisionador-----------------------

class Colisionador{

private:

public:

  void CalculeFuerzas(Cuerpo * Planeta);
  void CalculeFuerzaEntre(Cuerpo & Planeta1, Cuerpo & Planeta2);
};

void Colisionador::CalculeFuerzas(Cuerpo * Planeta){

  int i, j;
  //borrar todas las fuerzas 
  for(i=0; i<N; i++){
  Planeta[i].BorreFuerza();
  }
  //Calcular todas las fuerzas 
  for (i=0; i<N; i++){
    for (j=i+1; j<N; j++){
      CalculeFuerzaEntre(Planeta[i], Planeta[j]);
    }
  }
}
void Colisionador::CalculeFuerzaEntre(Cuerpo & Planeta1, Cuerpo & Planeta2){
  vector3D r21=Planeta2.r-Planeta1.r;
  double aux=G*Planeta2.m*Planeta1.m*std::pow(norma2(r21),-1.5);
  vector3D F1= r21*aux;
  Planeta1.AdicioneFuerza(F1); Planeta2.AdicioneFuerza(-1*F1); 
}


//-------------------------- Funciones de Animacion -------------------

void InicieAnimacion(void){
  //cout<<"set terminal gif animate"<<endl; 
  // cout<<"set output 'Planeta.gif'"<<endl;
  cout<<"unset key"<<endl;
  cout<<"set xrange[-120:120]"<<endl;
  cout<<"set yrange[-120:120]"<<endl;
  cout<<"set size ratio -1"<<endl;
  cout<<"set parametric"<<endl;
  cout<<"set trange [0:7]"<<endl;
  cout<<"set isosamples 12"<<endl;  
}
void InicieCuadro(void){
  cout<<"plot 0,0 ";
}
void TermineCuadro(void){
  cout<<endl;
}

//-----------------------  Programa Principal ------------------------

int main(void){
  Cuerpo Pendulo[N];
  Colisionador Newton;
  int i;
  double m0=100, R0=2, L0=12;
  double T=2*M_PI*std::sqrt(L0/g);
  
  
  double t, tdibujo, tmax=4*T, tcuadro=T/1000, dt=0.01;

 InicieAnimacion(); //Dibujar


 
  //----------------------------------(theta0, omega0, m0,R0, L0, x00)
                     Planeta[0].Inicie(    -05, 0    , m0,R0, L0, 0);
  for(i=1; i<N; i++) Planeta[i].Inicie(0, 0, 0 ,   V1 , m1, R1);
  
 
  
  for(t=0, tdibujo=0; t<tmax; t+=dt, tdibujo+=dt){
    
    
    //Dibujar animacion
    if(tdibujo>tcuadro){
        
	  InicieCuadro();
	  for(int i=0; i<N; i++)
	  Planeta[i].Dibujese();
	  TermineCuadro();
      
      
      // hacer un plot
      //std::cout<< Planeta[0].Getx()<<"\t"<<Planeta[0].Gety()<<"\t"<< Planeta[1].Getx()<<"\t"<<Planeta[1].Gety()<<endl;
      tdibujo=0;
    }
    //muevase por OMELYAN PEFRL
    
    for(i=0; i<N; i++)Planeta[i].Mueva_r(dt,E);
    Newton.CalculeFuerzas(Planeta);  for(i=0; i<N; i++)Planeta[i].Mueva_V(dt,coeficiente1);
    for(i=0; i<N; i++)Planeta[i].Mueva_r(dt,X);
    Newton.CalculeFuerzas(Planeta);  for(i=0; i<N; i++)Planeta[i].Mueva_V(dt,L);
    for(i=0; i<N; i++)Planeta[i].Mueva_r(dt,coeficiente2);
    Newton.CalculeFuerzas(Planeta);  for(i=0; i<N; i++)Planeta[i].Mueva_V(dt,L);
    for(i=0; i<N; i++)Planeta[i].Mueva_r(dt,X);
    Newton.CalculeFuerzas(Planeta);  for(i=0; i<N; i++)Planeta[i].Mueva_V(dt,coeficiente1);
    for(i=0; i<N; i++)Planeta[i].Mueva_r(dt,E);
    
  }   
  return 0;
}


